// Code generated by mockery v1.0.0. DO NOT EDIT.

package mocks

import data "github.com/ramadani/go-api-skeleton/app/user/data"
import mock "github.com/stretchr/testify/mock"

// Repository is an autogenerated mock type for the Repository type
type Repository struct {
	mock.Mock
}

// Create provides a mock function with given fields: name, email, password
func (_m *Repository) Create(name string, email string, password string) (uint, error) {
	ret := _m.Called(name, email, password)

	var r0 uint
	if rf, ok := ret.Get(0).(func(string, string, string) uint); ok {
		r0 = rf(name, email, password)
	} else {
		r0 = ret.Get(0).(uint)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(string, string, string) error); ok {
		r1 = rf(name, email, password)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Delete provides a mock function with given fields: id
func (_m *Repository) Delete(id uint) error {
	ret := _m.Called(id)

	var r0 error
	if rf, ok := ret.Get(0).(func(uint) error); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// FindByID provides a mock function with given fields: id
func (_m *Repository) FindByID(id uint) (data.User, error) {
	ret := _m.Called(id)

	var r0 data.User
	if rf, ok := ret.Get(0).(func(uint) data.User); ok {
		r0 = rf(id)
	} else {
		r0 = ret.Get(0).(data.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(uint) error); ok {
		r1 = rf(id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// Paginate provides a mock function with given fields: limit, offset
func (_m *Repository) Paginate(limit uint, offset uint) ([]data.User, uint, error) {
	ret := _m.Called(limit, offset)

	var r0 []data.User
	if rf, ok := ret.Get(0).(func(uint, uint) []data.User); ok {
		r0 = rf(limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]data.User)
		}
	}

	var r1 uint
	if rf, ok := ret.Get(1).(func(uint, uint) uint); ok {
		r1 = rf(limit, offset)
	} else {
		r1 = ret.Get(1).(uint)
	}

	var r2 error
	if rf, ok := ret.Get(2).(func(uint, uint) error); ok {
		r2 = rf(limit, offset)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// Update provides a mock function with given fields: name, id
func (_m *Repository) Update(name string, id uint) error {
	ret := _m.Called(name, id)

	var r0 error
	if rf, ok := ret.Get(0).(func(string, uint) error); ok {
		r0 = rf(name, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}
